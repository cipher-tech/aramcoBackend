"""
Project Schema
"""
scalar DateTime

enum UserRole {
  user
  admin
}
enum Status {
  verified
  unverified
}
# enum Plans {
#   "gas"
#   Chemicals
#   "crude oil"
#   "Refined Product"
#   "Power Systems"
#   "Large Cap Stock"
#   "Mid Cap Stocks"
#   "Blue Chip Stocks"
#   "Redeemable Shares"
#   "Equity Shares"
#   none
# }

type DepositAttributes {
  id: ID!
  userId: Int!
  plan: String
  amount: Int!
  status: String
  slug: String
  users: User!
  wallet_balance: Int!
  createdAt: DateTime
  updatedAt: DateTime
}
type User {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!
  phone_no: String!
  password: String!
  status: String!
  coin_address: String
  wallet_balance: Int
  plan: String
  role: UserRole!
  slug: String!
  auth_token: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deposits: [DepositAttributes]
}

type Plan {
  id: Int!
  name: String!
  slug: String!
  rate: Int!
  from: Int!
  to: Int!
  duration: Int!
  user_id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}
type UserToken {
  auth_token: String
  message: String!
}
type Response {
  message: String
  status: String
  referenceId: String!
}
type UserStats {
  totalBalance: Int!
  totalEarnings: Int!
  totalDeposits: Int!
  totalWithdrawal: Int!
  activePlan: String
}
input Register {
  first_name: String!
  last_name: String!
  email: String!
  phone_no: String!
  password: String!
  plan: String
  coin_address: String
}

input Login {
  email: String!
  password: String!
}
input Id {
  id: ID!
}

input DepositRequest {
  userId: ID!
  amount: Int!
  plan: String!
}
input WithdrawalRequest {
  userId: ID!
  amount: Int!
}

type Query {
  helloWorld(name: String): String!
  getUser: User!
  getUsers: [User!]!
  getUserPendingDeposits: [DepositAttributes!]
  getUserDeposits: [DepositAttributes!]
  getPendingDeposits: [DepositAttributes!]
  getUserPendingWithdrawals: [DepositAttributes!]
  getUserWithdrawals: [DepositAttributes!]
  getPendingWithdrawals: [DepositAttributes!]
  getAdminDeposits: [DepositAttributes!]
  getAdminWithdrawals: [DepositAttributes!]
  getUserStats: UserStats!
  getAdminStats: UserStats!
}

type Mutation {
  register(input: Register!): User!
  login(input: Login!): User!
  depositRequest(input: DepositRequest!): Response!
  activateDeposit(input: Id): Response!
  cancelDeposit(input: Id): Response!
  cancelWithdrawal(input: Id): Response!
  deleteDepositRequest(input: Id): Response!
  withdrawalRequest(input: WithdrawalRequest!): Response!
  activateWithdrawal(input: Id): Response!
  deleteWithdrawalRequest(input: Id): Response!
  logout: Boolean
}
